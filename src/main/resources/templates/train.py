#!/usr/bin/env python3
"""
Standardized training script that works with any user algorithm.
This file is automatically generated and should not be modified by users.
"""

import json
import pickle
import pandas as pd
import sys
import os
from pathlib import Path

def main():
    try:
        # Load parameters
        with open('/data/params.json', 'r') as f:
            params = json.load(f)

        # Load dataset
        dataset_path = '/data/dataset.csv'
        if not os.path.exists(dataset_path):
            raise FileNotFoundError(f"Dataset not found at {dataset_path}")

        df = pd.read_csv(dataset_path)

        # Split features and target
        # Assume last column is target, rest are features
        X = df.iloc[:, :-1].values
        y = df.iloc[:, -1].values

        print(f"Dataset loaded: {X.shape[0]} samples, {X.shape[1]} features")
        print(f"Parameters: {params}")

        # Import user's algorithm
        sys.path.insert(0, '/data')
        from algorithm import Algorithm

        # Initialize and train the algorithm
        model = Algorithm(params)
        print("Training started...")
        model.fit(X, y)
        print("Training completed!")

        # Save the trained model
        model_path = '/model/trained_model.pkl'
        with open(model_path, 'wb') as f:
            pickle.dump(model, f)

        print(f"Model saved to {model_path}")

        # Save training metadata
        metadata = {
            'n_samples': int(X.shape[0]),
            'n_features': int(X.shape[1]),
            'params': params,
            'status': 'success'
        }

        with open('/model/metadata.json', 'w') as f:
            json.dump(metadata, f, indent=2)

        # Save metrics file (required by the system)
        metrics = {
            'accuracy': 'N/A',  # Would need validation set to compute
            'loss': 'N/A',      # Final training loss if available
            'training_samples': int(X.shape[0]),
            'features': int(X.shape[1]),
            'epochs_completed': params.get('n_epochs', 'unknown'),
            'status': 'completed'
        }

        with open('/model/metrics.json', 'w') as f:
            json.dump(metrics, f, indent=2)

        print("Training completed successfully!")

    except Exception as e:
        print(f"Training failed: {str(e)}")
        # Save error metadata
        error_metadata = {
            'status': 'failed',
            'error': str(e)
        }

        os.makedirs('/model', exist_ok=True)
        with open('/model/metadata.json', 'w') as f:
            json.dump(error_metadata, f, indent=2)

        sys.exit(1)

if __name__ == '__main__':
    main()